using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Panlingo.LanguageCode.Models;

namespace Panlingo.LanguageCode.SourceGenerator
{
    [Generator]
    public class ISOGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var assemblyName = context.CompilationProvider.Select((c, _) => c.AssemblyName);
            var texts = context.AdditionalTextsProvider;
            var combined = texts.Combine(assemblyName);

            context.RegisterSourceOutput(
                combined,
                (productionContext, sourceContext) =>
                {
                    Generate(
                        context: productionContext,
                        file: sourceContext.Left
                    );
                }
            );
        }

        public void Generate(
            SourceProductionContext context,
            AdditionalText file
        )
        {
            var className = $"{nameof(ISOGenerator)}ResourceProvider";
            var sourceBuilder = new StringBuilder();

            var text = file.GetText().ToString();

            text = Base64Encode(text);

            sourceBuilder.AppendLine($@"
            string text = Base64Decode(""{text}"");

            {nameof(ISOGeneratorResources)} = {nameof(ISOGeneratorResources)}.{nameof(ISOGeneratorResources.FromJson)}(text);
            ");

            var code = $@"
// <auto-generated/>
using System;
using System.Collections.Generic;
using Panlingo.LanguageCode.Models;

namespace {nameof(Panlingo)}.{nameof(LanguageCode)}
{{
    public static class {className}
    {{
        public static readonly {nameof(ISOGeneratorResources)} {nameof(ISOGeneratorResources)};

        static {className}()
        {{
            {sourceBuilder}
        }}

        static string Base64Decode(string base64EncodedData) 
        {{
            var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
            return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        }}
    }}
}}
            ";

            context.AddSource($"{className}.g.cs", SourceText.From(code, Encoding.UTF8));
        }

        public static string Base64Encode(string plainText)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            return System.Convert.ToBase64String(plainTextBytes);
        }
    }
}
